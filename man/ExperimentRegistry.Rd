% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ExperimentRegistry.R
\name{ExperimentRegistry}
\alias{ExperimentRegistry}
\alias{makeExperimentRegistry}
\title{ExperimentRegistry Constructor}
\usage{
makeExperimentRegistry(file.dir = "registry", work.dir = getwd(),
  conf.file = findConfFile(), packages = character(0L),
  namespaces = character(0L), source = character(0L),
  load = character(0L), seed = NULL, make.default = TRUE)
}
\arguments{
\item{file.dir}{[\code{character(1)}]\cr
  Path where all files of the registry are saved.
  Default is directory \dQuote{registry} in the current working directory.
  Path will get normalized unless it is provided relative to the home directory
  (i.e., starting with \dQuote{~}).
  Note some template do not handle relative paths well.

  If you pass \code{NA}, a temporary directory will be used.
  This way, you can create disposable registries for \code{\link{btlapply}} or examples.
  By default, the temporary directory \code{\link[base]{tempdir}()} will be used.
  If you want to use another directory, e.g. a directory which is shared between nodes,
  you can set it in your configuration file by setting the variable \code{temp.dir}.}

\item{work.dir}{[\code{character(1)}]\cr
Working directory for R process when experiment is executed.
For \code{makeRegistry}, this defaults to the current working directory.
\code{loadRegistry} uses the stored \code{work.dir}, but you may also explicitly provide one
yourself.
Path will get normalized unless it is provided relative to the home directory
(i.e., starting with \dQuote{~}).
Note some template do not handle relative paths well.}

\item{conf.file}{[\code{character(1)}]\cr
Path to a configuration file which is sourced directly after the registry is created.
For example, you can set cluster functions or default resources in it.
The script is executed inside the registry environment, thus you can directly set
all slots, e.g. \code{default.resources = list(walltime = 3600)} to set default resources.
Defaults to a heuristic which first looks for \dQuote{batchtools.conf.R} in the current working directory
and then tries \dQuote{.batchtools.conf.R} in the home directory.
Set to \code{character(0)} if you want to disable this lookup.}

\item{packages}{[\code{character}]\cr
Packages that will always be loaded on each node.
Uses \code{\link[base]{require}} internally.
Default is \code{character(0)}.}

\item{namespaces}{[\code{character}]\cr
Same as \code{packages}, but the packages will not be attached.
Uses \code{\link[base]{requireNamespace}} internally.
Default is \code{character(0)}.}

\item{source}{[\code{character}]\cr
Files which should be sourced on the slaves prior to executing a job.
Calls \code{\link[base]{sys.source}} using the \code{\link[base]{.GlobalEnv}}.}

\item{load}{[\code{character}]\cr
Files which should be loaded on the slaves prior to executing a job.
Calls \code{\link[base]{load}} using the \code{\link[base]{.GlobalEnv}}.}

\item{seed}{[\code{integer(1)}]\cr
Start seed for jobs. Each job uses the (\code{seed} + \code{job.id}) as seed.
Default is a random number in the range [1, \code{.Machine$integer.max/2}].}

\item{make.default}{[\code{logical(1)}]\cr
If set to \code{TRUE}, the created registry is saved inside the package
namespace and acts as default registry. You might want to switch this
off if you work with multiple registries simultaneously.
Default is \code{TRUE}.}
}
\value{
[\code{ExperimentRegistry}].
}
\description{
\code{makeExperimentRegistry} constructs a special \code{\link{Registry}} which
is suitable for the definition of large scale computer experiments.

Each experiments consists of a \code{\link{Problem}} and an \code{\link{Algorithm}}.
These can be parametrized with \code{\link{addExperiments}} to actually define computational
jobs.
}
\examples{
tmp = makeExperimentRegistry(file.dir = NA, make.default = FALSE)

# Definde one problem, two algorithms and add them with some parameters:
addProblem(reg = tmp, "p1",
  fun = function(job, data, n, mean, sd, ...) rnorm(n, mean = mean, sd = sd))
addAlgorithm(reg = tmp, "a1", fun = function(job, data, instance, ...) mean(instance))
addAlgorithm(reg = tmp, "a2", fun = function(job, data, instance, ...) median(instance))
ids = addExperiments(reg = tmp, list(p1 = CJ(n = c(50, 100), mean = -2:2, sd = 1:4)))

# Overview over defined experiments:
getProblemIds(reg = tmp)
getAlgorithmIds(reg = tmp)
summarizeExperiments(reg = tmp)
summarizeExperiments(reg = tmp, by = c("problem", "algorithm", "n"))
ids = findExperiments(prob.pars = (n == 50), reg = tmp)
getJobPars(ids, reg = tmp)

# Chunk jobs per algorithm and submit them:
ids = chunkIds(getJobPars(reg = tmp), group.by = "algorithm", reg = tmp)
submitJobs(ids, reg = tmp)
waitForJobs(reg = tmp)

# Reduce the results of algorithm a1
ids.mean = findExperiments(algo.name = "a1", reg = tmp)
reduceResults(ids.mean, fun = function(aggr, res, ...) c(aggr, res), reg = tmp)

# Join info table with all results and calculate mean of results
# grouped by n and algorithm
ids = findDone(reg = tmp)
pars = getJobPars(ids, reg = tmp)
results = reduceResultsDataTable(ids, fun = function(res) list(res = res), reg = tmp)
tab = ljoin(pars, results)
tab[, list(mres = mean(res)), by = c("n", "algorithm")]
}
\seealso{
Other Experiment: \code{\link{addExperiments}},
  \code{\link{removeExperiments}},
  \code{\link{summarizeExperiments}}
}

